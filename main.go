package main

import (
	"errors"
	"fmt"
	"log"
	"math/rand"
	"net/url"
	"os"
	"strconv"
	"strings"
	"tgbot/lib/e"
	"tgbot/storage"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

const msgHelp = `I can save and keep you pages. Also I can offer you them to read.

In order to save the page, just send me al link to it.

In order to get a random page from your list, send me command /rnd.
Caution! After that, this page will be removed from your list!–° —É–≤–∞–∂–µ–Ω–∏–µ–º, Petr Tate`
const msgHello = "wassup manüôÉ \n\n –∑–∞—Ö–æ–¥–∏ –Ω–µ –±–æ–π—Å—è ,–≤—ã—Ö–æ–¥–∏ –Ω–µ –ø–ª–∞—á—å\n\n" + msgHelp
const (
	msgUnknownCommand = "—ç—Ç–æ —Ñ–∏–∞—Å–∫–æü§∑‚Äç‚ôÇÔ∏è"
	msgNoSavedPages   = "üëÄ—É –≤–∞—Å –Ω–µ—Ç—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫;(((("
	msgSaved          = "—É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ,—Å—ç—Äüëå"
	msgAlreadyExists  = "–±–æ—Å—Å,–≤—ã –∂–µ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏ —ç—Ç—É —Å—Å—ã–ª–∫—Éüëâüëà"
)
const (
	RndCmd   = "/rnd" //—Ä–∞–Ω–¥–æ–º–Ω–∞—è —Å—Å—ã–ª–∫–∞
	HelpCmd  = "/help"
	StartCmd = "/start"
)

func main() {
	bot, err := tgbotapi.NewBotAPI("6342619263:AAHm5ZpmMEn9ozRabHN4Es3YzzLt_ffocP8")
	if err != nil {
		log.Panic(err)
	}

	//bot.Debug = true

	log.Printf("Authorized on account %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil { // If we got a message
			continue

		}
		go handleCommand(bot, update.Message)

	}
}
func handleCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	chatID := message.Chat.ID
	username := message.From.UserName
	text := message.Text

	text = strings.TrimSpace(text)
	log.Printf("Got new command '%s' from '%s'", text, username)

	err := doCmd(text, int(chatID), username)
	if err != nil {
		log.Println(err)
	}
}
func doCmd(text string, chatID int, username string) error { //doCmd-api —Ä–æ—É—Ç–µ—Ä–∞(—Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–Ω–∏–º–∞–µ—Ç,–∫–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å)
	text = strings.TrimSpace(text) //—É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
	log.Printf("got new command '%s'from '%s", text, username)
	if isAddCmd(text) { //–µ—Å–ª–∏ –æ—Ç–ø—Ä.—Å–æ–æ–±—â.—è–≤–ª —Å—Å—ã–ª–∫–æ–π
		return savePage(chatID, text, username)
	}
	switch text {
	case RndCmd:
		return sendRandom(chatID, username)
	case HelpCmd:
		return sendHelp(chatID)
	case StartCmd:
		return sendHello(chatID)
	default:
		return SendMessage(chatID, msgUnknownCommand)

	}

}
func savePage(chatID int, pageURL string, username string) (err error) { //—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
	defer func() { err = e.WrapIfErr("cant do command:save page", err) }() //–û–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ nil.
	page := &storage.Page{
		URL:      pageURL,
		UserName: username,
	}
	isExists, err := IsExists(page) //—Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Å—ã–ª–∫–∞ —É–∂–µ 
	if err != nil {
		return err
	}
	if isExists {
		return SendMessage(chatID, msgAlreadyExists)
	}
	if err := Save(page); err != nil {
		return err
	}
	if err := SendMessage(chatID, msgSaved); err != nil {
		return err
	}
	return nil
}

type MyStorage struct {
	Dataa []string
	offset  int //–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞—è –Ω–µ —Å —Å–∞–º–æ–≥–æ –ø–µ—Ä–≤–æ–≥–æ, –∞ —Å –Ω–µ–∫–æ—Ç–æ—Ä–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ ID.
	storage storage.Storage
	Data    string
}

func (s *MyStorage) Save(filename string) error {
	// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞ Save
	file, err := os.OpenFile(filename, os.O_WRONLY|os.O_CREATE, 0644)
	if err != nil {
		return err
	}
	defer func(file *os.File) {
		err := file.Close()
		if err != nil {

		}
	}(file)

	// –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
	_, err = file.WriteString(s.Data)
	if err != nil {
		return err
	}

	fmt.Println("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª", filename)
	return nil
}

func (s *MyStorage) IsExists(p storage.Page) (bool, error) {
	// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞ IsExists
	// –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
	// –í–µ—Ä–Ω–∏—Ç–µ true, –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏ false, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	// –í–µ—Ä–Ω–∏—Ç–µ –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ
	for _, data := range s.Dataa {
		if data == p.URL {
			return true, nil
		}
	}
	return false, nil
}


func sendRandom(chatID int, username string) (err error) {
	defer func() { err = e.WrapIfErr("cant do command:cant send random", err) }()
	page, err := PickRandom(username)
	if err != nil && !errors.Is(err, storage.ErrNoSavedPages) { //errors.is –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–¥–∞–Ω–Ω—ã–º —Ç–∏–ø–æ–º –æ—à–∏–±–∫–∏(–∫–æ–≥–¥–∞ –Ω–µ—Ç—É —Å–æ—Ö—Ä.—Å—Ç—Ä)
		return err
	}
	if errors.Is(err, storage.ErrNoSavedPages) {
		return SendMessage(chatID, msgNoSavedPages) //–µ—Å–ª–∏ –Ω–∏—á–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª
	}
	if err := SendMessage(chatID, page.URL); err != nil { //–µ—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É
		return err
	}
	return Remove(page) //—É–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫—É

}

func (s *MyStorage) Remove(p *storage.Page) error {
	// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞ Remove
	// –ù–∞–π–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ —É–¥–∞–ª–∏—Ç–µ –µ–µ
	// –í–µ—Ä–Ω–∏—Ç–µ –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
	index := -1
	for i, data := range s.Dataa {
		if data == p.URL {
			index = i
			break
		}
	}
	if index == -1 {
		return fmt.Errorf("page not found: %s", p.URL)
	}
	// –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
	s.Dataa = append(s.Dataa[:index], s.Dataa[index+1:]...)
	return nil
}
}

func (s *MyStorage) PickRandom() (string, error) {
	if len(s.Dataa) == 0 {
		return "", fmt.Errorf("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
	rand.Seed(time.Now().UnixNano())

	// –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
	randomIndex := rand.Intn(len(s.Data))
	randomElement := s.Data[randomIndex]

	return strconv.Itoa(int(randomElement)), nil
}

}
func SendMessage(chatID int, message string) error { //chatID ,—á—Ç–æ–±—ã —É—Ç–æ—á–Ω–∏—Ç—å,–∫—É–¥–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –æ—Ç–ø—Ä.—Å–æ–æ–±—â
	bot, err := tgbotapi.NewBotAPI("6342619263:AAHm5ZpmMEn9ozRabHN4Es3YzzLt_ffocP8")
	msg := tgbotapi.NewMessage(int64(chatID), message)

	_, err = bot.Send(msg)
	if err != nil {
		log.Panic(err)
	}
	return nil
}

func sendHello(chatID int) error {
	return SendMessage(chatID, msgHello)
}
func sendHelp(chatID int) error {
	return SendMessage(chatID, msgHelp)
}
func isAddCmd(text string) bool {
	return isURL(text)

}
func isURL(text string) bool {
	u, err := url.Parse(text)         //—Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å URL-–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å URL –∏ –∏–∑–≤–ª–µ—á—å –∏–∑ –Ω–µ–≥–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: —Ö–æ—Å—Ç, –ø–æ—Ä—Ç, –ø—É—Ç—å, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç
	return err == nil && u.Host != "" //–µ—Å–ª–∏ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –Ω–µ—Ç –æ—à–∏–±–∫–∏ –∏ —Ö–æ—Å—Ç –∏–∑ —Ä–∞–∑–æ–±–∞—Ä–Ω–Ω–æ–≥–æ url –Ω–µ –ø—É—Å—Ç–æ–π
}
